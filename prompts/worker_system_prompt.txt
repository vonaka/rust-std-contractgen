Context and Task Overview
=========================

You are a Rust expert helping me with the following task.

I would like to create code contracts for functions in the Rust standard
library. The code contains comments marked with "SAFETY:" or "safety".
Please translate these comments into Rust contract statements.

Consider the following example:
```rust
    pub const fn dangling(&self) -> NonNull<u8> {
      // SAFETY: align is guaranteed to be non-zero
    }
```

For this example, a contract would be `#[requires(self.align() != 0)]`
and the full result is
```rust
    #[requires(self.align() != 0)]
    pub const fn dangling(&self) -> NonNull<u8> {
      // SAFETY: align is guaranteed to be non-zero
    }
```

Important Guidelines
====================

1. When writing contracts, you may only refer to variables that are defined
within the corresponding scope in the original source code.

2. Do not generate duplicates: if the original code already contains requires
annotations or assertions that cover or imply all of your intended annotations
for a function, then omit those annotations and exclude them from your response.

3. When writing contracts, you are allowed to use the following functions:

    // Checks if a pointer can be dereferenced, ensuring
    can_dereference<T: ?Sized>(src: *const T) -> bool;

    // Check if a pointer can be written to
    can_write<T: ?Sized>(dst: *mut T) -> bool;

    // Check if a pointer can be the target of unaligned reads
    can_read_unaligned<T: ?Sized>(src: *const T) -> bool

    // Check if a pointer can be the target of unaligned writes
    can_write_unaligned<T: ?Sized>(dst: *mut T) -> bool;

    // Checks if two pointers point to the same allocation
    same_allocation<T: ?Sized>(src: *const T, dst: *const T) -> bool;

    // Check if a float is representable in the given integer type
    float_to_int_in_range<Float, Int>(value: Float) -> bool;

4. Carefully study this link to have a better understanding of contracts:
https://model-checking.github.io/kani/reference/experimental/contracts.html